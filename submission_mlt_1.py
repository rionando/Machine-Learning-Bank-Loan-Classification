# -*- coding: utf-8 -*-
"""Submission MLT 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pGA4TeanyQL7MlZrOrHMxxY-9nMLBv3H

# **Analisis Prediktif**: Prediksi Pelanggan Yang Berpeluang Lebih Besar Membayar Hutang

##### Oleh : Muhammad Rionando D
##### Proyek Submission 1 - Machine Learning Terapan Dicoding

# **Pendahuluan**

Pada proyek ini, topik yang dibahas adalah mengenai dunia perbankan yang dibuat untuk memprediksi pelanggan mana yang memiliki peluang lebih besar untuk membyar hutang berdasarkan variabel-variabel yang ada.

# **1. Mengimpor pustaka/modul python yang dibutuhkan**
"""

# Memasang modul plotly & scikit-learn terbaru
!pip install -U plotly
!pip install -U scikit-learn

# Commented out IPython magic to ensure Python compatibility.
# Untuk pengolahan data
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.utils import resample 

# Untuk visualisasi data
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import plotly.express as px
import missingno as msno

# Untuk pembuatan model 
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

# Untuk evaluasi model
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.metrics import confusion_matrix,precision_score,classification_report,f1_score,roc_curve,roc_auc_score,auc,accuracy_score,recall_score
from sklearn import metrics

"""# **2. Mempersiapkan Dataset**"""

#install kaggle library 
!pip install kaggle

#upload file kaggle.json
from google.colab import files
files.upload()

#kaggle setup
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

#upload dataset 
!kaggle datasets download -d itsmesunil/bank-loan-modelling

#mengekstrak dataset
!unzip /content/bank-loan-modelling.zip



"""# **3. Pemahaman Data** ***(Data Understanding)***

## 3.1 Memuat Data pada sebuah Dataframe menggunakan *pandas*
"""

#memuat dataset dan menampilkan data sekilas
df = pd.read_excel("/content/Bank_Personal_Loan_Modelling.xlsx",'Data')
df.head(10)

"""## 3.2 Keterangan kolom pada dataset"""

#Memuat informasi dataframe
df.info()

# Menghitung null pada setiap kolom
df.isna().sum()

#mendiskripsikan dataframe
df.describe()

#mengetahui jumlah dataset
df.shape

#mengetahui type data
df.dtypes

#mengecek unique value tiap variabel
df.nunique()

"""## 3.3 Exploratory Data Analysis (EDA)

Berdasarkan unique value kita membagi data menjadi varibel kategori dan numerik
"""

variable_kategori=[col for col in df.columns if df[col].nunique()<=5]
print(variable_kategori)
variabe_numerik=[col for col in df.columns if df[col].nunique()>5]
print(variabe_numerik)

"""kita akan menghapus variabel personal loan karena merupakan variabel dependen dan ID karena tidak berpengaruh ke modelling"""

variable_kategori.remove("Personal Loan")
print(variable_kategori)
variabe_numerik.remove("ID")
print(variabe_numerik)

"""Variabel Numerik"""

#menampilkan grafik distribusi data variabel numerik
fig=plt.figure(figsize=(15,10))
for i,col in enumerate(variabe_numerik):
    ax=fig.add_subplot(2,3,i+1)
    sns.distplot(df[col])

"""1. variabel **'age'** dan **'experience'** berdistribusi normal
2. varibael **'income''CCAvg' dan 'mortgage'** memiliki kemiringan positif
3. variabel **ZIP code** memiliki kemiringan negatif

Variabel Kategori
"""

#memvisualisasikan data kategori
fig=plt.figure(figsize=(15,10))
for i,col in enumerate(variable_kategori):
    ax=fig.add_subplot(2,3,i+1)
    sns.countplot(df[col])

"""1. Kebanyakan pelanggan tidak memiliki **Securities Account, CD Account dan CreditCard**
2. Kebanyakan pelanggan menggunakan** internet banking**
3. Persebaran **tipe keluarga** di dominasi tipe 1 dan 2
"""

# mengamati hubungan antar fitur dengan fungsi pairplot
sns.pairplot(df)

"""1. Variable **'age'** beridistribusi normal dengan rata rata usia antara 30-60 tahun

2. Variabel **'Experience'** berdistribusi normal dan banyak customer yang memiliki pengalaman mulai 8 tahun. 

3. Variabel **Income** memiliki kemiringan positif. mayoritas pelanggan memiliki pemasukan antara 45K-55K. 

4. Variabel **CCAvg** juga memiliki kemiringan positif dan rata rata pengeluaran antara 0K-10K dan mayoritas kurang dari 2.5K.

5. Variabel **Mortgage** 70% pelanggan memiliki mortgage kurang dari 40K. Namun nilai maksimalnya adalah 635K.

"""

#mengecek korelasi antar variabel
plt.figure(figsize=(15,10))
sns.heatmap(df.corr(), annot=True, fmt='.2g')

"""1. Variabel **Income dan CCAvg** memiliki korelasi yang cukup tinggi
2. Variabel **Age dan Experience** memiliki korelasi yang sangat tinggi

# Data Cleaning
"""

#membuang data yang terduplikat
df.drop_duplicates(inplace=True)

#Mengecek baris dan kolom
df.shape

#menampilkan data
df.head()

"""# **4. Persiapan Data** ***(Data Preparation)***

## 4.1 Train Test Split
"""

#menentukan x dan y
X = df.drop('Personal Loan', axis=1)
y = df['Personal Loan']

#Split data 80:20
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=100)

#menampilkan x train
X_train.head()

"""## 4.1 Standarisasi Scaller"""

# Inisialisasi fungsi StandardScaler
scaler=StandardScaler()

#standarisasi pada x train
X_train[['Age','Income','Family','CCAvg','Education','Mortgage']]=scaler.fit_transform(X_train[['Age','Income','Family','CCAvg','Education','Mortgage']])

#menampilkan data
X_train.head()

#standarisasi x test
X_test[['Age','Income','Family','CCAvg','Education','Mortgage']]=scaler.fit_transform(X_test[['Age','Income','Family','CCAvg','Education','Mortgage']])
X_test.head()

# Mengecek jumlah baris pada data latih dan data 
print(X_train.shape)
print(X_test.shape)

model_list=[]
model_f1_score=[]
model_accuracy_score=[]

"""# **5. Pembuatan Model**

## 5.1 Model Decision Tree
"""

#pembuatan model
model_list.append('DecisionTreeClassifier')
tree=DecisionTreeClassifier()

tree.fit(X_train,y_train)

# Pengujian model terhadap data test
yhat_tree=tree.predict(X_test)

# mengecek hasil accuracy
tree_accuracy=accuracy_score(y_test,yhat_tree)
model_accuracy_score.append(tree_accuracy)
tree_accuracy

#melihat hasil report klasifikasi
print(classification_report(y_test,yhat_tree))

"""## 5.2 Model Random Forest"""

#pembuatan model
model_list.append('RandomForestClassifier')
forest=RandomForestClassifier()
forest.fit(X_train,y_train)

# Pengujian model terhadap data test
yhat_forest=forest.predict(X_test)

#melihat skor akurasi
forest_accuracy=accuracy_score(y_test,yhat_forest)
model_accuracy_score.append(forest_accuracy)
forest_accuracy

#melihat hasil report klasifikasi
print(classification_report(y_test,yhat_forest))

"""## 5.3 Model KNN"""

#pembuatan model
model_list.append('KNeighborsClassifier')
neighbour=KNeighborsClassifier()
neighbour.fit(X_train,y_train)

# Pengujian model terhadap data test
yhat_neighbour=neighbour.predict(X_test)

#melihat skor accuracy
neighbour_accuracy=accuracy_score(y_test,yhat_neighbour)
model_accuracy_score.append(neighbour_accuracy)
neighbour_accuracy

#melihat reort klasifikasi
print(classification_report(y_test,yhat_neighbour))

"""# **6. Evaluasi Model**

## 6.1 Perbandingan metriks antara model
"""

#membandingkan hasil accuracy
models = pd.DataFrame({
    'Model': ['KNN','Random Forest','Decision Tree'],
    'Score': [neighbour_accuracy, forest_accuracy, tree_accuracy]})
models.sort_values(by='Score', ascending=False)

"""Berdasarkan hasil perbandingan accuracy random forest merupakan model terbaik

## 6.2 Confussion matrix
"""

#confussion matrix model decision tree
sns.heatmap(confusion_matrix(y_test,yhat_tree),annot=True,fmt='',cmap='YlGnBu')

#confussion matrix model Random forrest
sns.heatmap(confusion_matrix(y_test,yhat_forest),annot=True,fmt='',cmap='YlGnBu')

#confussion matrix model KNN
sns.heatmap(confusion_matrix(y_test,yhat_neighbour),annot=True,fmt='',cmap='YlGnBu')

"""# Penutupan

Model untuk memprediksi pelanggan yang berpotensi membayar hutang telah selesai dibuat dan model ini dapat digunakan untuk memprediksi data sebenarnya. 


### *Referensi*
- Dokumentasi Scikit-learn : https://scikit-learn.org/stable/modules/classes.html
- Dokumentasi Plotly : https://plotly.com/python/
- Lainnya :
  - https://www.kaggle.com/aarjavkumarjain/bank-personal-loan-model#Data-Visualizationwater-quality-analysis-plotly-and-modelling
  - https://www.kaggle.com/adityakadiwal/eda-and-personal-loan-prediction-acc-97-5
  - https://www.kaggle.com/itsmesunil/campaign-for-selling-personal-loans
  - https://www.kaggle.com/romwill/bank-looking-for-clients
  - https://www.kaggle.com/dikshasingh19/bank-loan-model-using-decisiontreeclassifier#Scaling
"""